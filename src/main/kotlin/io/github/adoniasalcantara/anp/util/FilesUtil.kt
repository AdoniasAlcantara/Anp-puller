package io.github.adoniasalcantara.anp.util

import io.github.adoniasalcantara.anp.model.Station
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path
import kotlin.streams.toList

/**
 * Creates a directory on the default system path for temporary files.
 * This directory is named using a hardcoded prefix and a randomly
 * generated suffix.
 *
 * @return the absolute path of the temporary directory.
 */
fun makeTempDir() = Files
    .createTempDirectory("anp-puller-")
    .toString()

inline fun <reified T> readJson(file: Path): T {
    val str = Files.readString(file)
    return Json.decodeFromString(str)
}

/**
 * Helps reading/writing files related to the application, as well as
 * in serialization, deserialization, and tracking of temporary files.
 */
class FileHandler(
    private val tempDir: Path,
    private val outFile: Path
) {
    private companion object {
        const val TEMP_FILE_EXT = ".tmp.json"
    }

    init {
        val temp = tempDir.toFile()
        if (!temp.exists()) temp.mkdir()
    }

    /**
     * Writes a temporary file corresponding to the result of a given task.
     * The file is named using the [taskId] parameter.
     *
     * @param taskId the identifier of the completed task.
     * @param stations the result of the task.
     */
    fun writeTemp(taskId: Int, stations: List<Station>) {
        val str = Json.encodeToString(stations)
        val tempFile = tempDir.resolve("$taskId$TEMP_FILE_EXT")
        Files.writeString(tempFile, str)
    }

    /**
     * Gathers all temporary files generated by the completed tasks
     * and concatenates them into a single final file.
     */
    fun writeConcat() {
        val pathMatcher = FileSystems.getDefault()
            .getPathMatcher("glob:**$TEMP_FILE_EXT")

        val tempFiles = Files
            .find(tempDir, 1, { file, _ -> pathMatcher.matches(file) })
            .toList()

        Files.newBufferedWriter(outFile).use { writer ->
            writer.write("[")

            tempFiles.forEachIndexed { index, file ->
                val content = Files.readString(file).trimStart('[').trimEnd(']')
                writer.write(content)

                if (index < tempFiles.lastIndex) writer.write(",")
            }

            writer.write("]")
        }
    }
}
